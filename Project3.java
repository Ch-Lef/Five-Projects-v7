import java.io.*;
import java.util.Arrays;

/*

 * Αυτό το πρόγραμμα αναλύει το περιεχόμενο ενός αρχείου,
 * καταμετρώντας τη συχνότητα εμφάνισης κάθε χαρακτήρα.
 * Η ανάλυση περιορίζεται στους κεφαλαίους και μικρούς χαρακτήρες του λατινικού αλφαβήτου.
 * Στη συνέχεια, εκτυπώνει τις συχνότητες των χαρακτήρων με δύο τρόπους:
 * 1. Ταξινόμηση ανά χαρακτήρα (αλφαβητικά).
 * 2. Ταξινόμηση ανά συχνότητα (από την υψηλότερη στη χαμηλότερη συχνότητα).
 *
 * Χρησιμοποιείται ένας δισδιάστατος πίνακας charCounter για την αποθήκευση των χαρακτήρων και των συχνοτήτων τους.
 *
 */

public class Project3 {

    // Δισδιάστατος πίνακας για την αποθήκευση του χαρακτήρα και της συχνότητάς του
    static int[][] charCounter = new int[128][2];

    // Διαδρομή του αρχείου προς ανάγνωση
    static String file = "src/files/test";

    // Εύρος κεφαλαίων χαρακτήρων (Α-Ζ)
    static int[] capitalRange = {65, 90};

    // Εύρος μικρών χαρακτήρων (α-ζ)
    static int[] lowercaseRange = {97, 122};

    public static void main(String[] args) {
        /*
         * Κύρια μέθοδος εκτέλεσης του προγράμματος.
         * 1. Ανοίγει το αρχείο και το διαβάζει γραμμή-γραμμή.
         * 2. Καταμετρά τη συχνότητα εμφάνισης κάθε χαρακτήρα (εκτός από κενά).
         * 3. Εκτυπώνει τους χαρακτήρες με αλφαβητική και συχνότητα ταξινόμηση.
         */

        // Ανάγνωση του αρχείου και καταμέτρηση των χαρακτήρων
        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            String line;

            // Διαβάζει κάθε γραμμή του αρχείου
            while ((line = br.readLine()) != null) {
                // Διατρέχει κάθε χαρακτήρα της γραμμής
                for (int i = 0; i < line.length(); i++) {
                    char c = line.charAt(i);

                    // Εξαιρεί τα κενά και καταμετρά μόνο τους χαρακτήρες
                    if (!Character.isWhitespace(c)) {
                        charCounter[c][0] = c;  // Αποθηκεύει τον χαρακτήρα
                        charCounter[c][1]++;    // Αυξάνει τη συχνότητα του χαρακτήρα
                    }
                }
            }
        } catch (IOException e) {
            throw new RuntimeException(e); // Εξαίρεση σε περίπτωση σφάλματος ανάγνωσης του αρχείου
        }

        // Εκτύπωση των χαρακτήρων ταξινομημένων αλφαβητικά
        System.out.println("_____________________________________________Ταξινόμηση ανά χαρακτήρα:" + "_____________________________________________");
        printEligibleCharacters();

        // Ταξινόμηση των χαρακτήρων βάσει συχνότητας
        Arrays.sort(charCounter, (a, b) -> Integer.compare(b[1], a[1]));

        // Εκτύπωση των χαρακτήρων ταξινομημένων με βάση τη συχνότητά τους
        System.out.println("_____________________________________________Ταξινόμηση ανά συχνότητα:" + "_____________________________________________");
        printEligibleCharacters();
    }

    /*
     * Μέθοδος για την εκτύπωση των χαρακτήρων που πληρούν τα κριτήρια
     * (κεφαλαίοι ή μικροί χαρακτήρες) και της συχνότητάς τους.
     */
    static void printEligibleCharacters() {
        int printCounter = 0;

        // Διατρέχει τον πίνακα charCounter και εκτυπώνει τους χαρακτήρες και τη συχνότητά τους
        for (int[] el : charCounter) {
            // Ελέγχει αν ο χαρακτήρας είναι είτε μικρός είτε κεφαλαίος
            if (isEligible(el[0])) {
                // Εκτυπώνει τον χαρακτήρα και τη συχνότητα του
                System.out.printf("%s : %d  ", (char) el[0], el[1]);

                // Ελέγχει αν έχει εκτυπωθεί 13 χαρακτήρες για να κάνει νέα γραμμή
                if (++printCounter % 13 == 0) {
                    System.out.println();
                }
            }
        }
        System.out.println(); // Προσθήκη κενής γραμμής στο τέλος
    }

    /*
     * Ελέγχει αν ο χαρακτήρας είναι μικρός ή κεφαλαίος
     * (ανήκει στο εύρος 'a' - 'z' ή 'A' - 'Z').
     */
    static boolean isEligible(int c) {
        return (c >= lowercaseRange[0] && c <= lowercaseRange[1]) || (c >= capitalRange[0] && c <= capitalRange[1]);
    }
}
